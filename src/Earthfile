VERSION 0.6
FROM alpine:latest
WORKDIR /work
RUN apk upgrade --update && apk add --no-cache bash


# Makes base image with pacstrap utility.
pacstrap-alpine-docker-image:
  # Installs required instuments.
  RUN apk add --update --no-cache pacman arch-install-scripts \
    pacman-makepkg curl tar zstd

  COPY ./pacman-configs /etc/

  # Installs pacman keyring.
  RUN pacman -Sy && \
    curl $(pacman -Sp archlinux-keyring | tail -n1) | tar -x --zstd -C / &&\
    pacman-key --init && pacman-key --populate && pacman -Syyu

  SAVE IMAGE pacstrap-alpine



# Gets kernel from arch repository and builds initramfs with custom hooks.
kernel-and-initramfs:
  FROM +pacstrap-alpine-docker-image

  # Gets kernel and builds custom initramfs by hooks
  RUN install -m 755 -d ./etc/initcpio/{install,hooks}
  COPY ./initramfs/mkinitcpio.conf ./etc/
  COPY ./initramfs/initramfs_build_hook ./etc/initcpio/install/overlay_over_partition
  COPY ./initramfs/initramfs_run_hook ./etc/initcpio/hooks/overlay_over_partition

  RUN --mount=type=cache,target=./var/cache/pacman/pkg --privileged \
    pacstrap ./ sed linux mkinitcpio

  # Gets kernel version
  RUN pacman --root ./ -Qi linux | sed -nE 's/Version.*: //gp' > linux-version.txt

  SAVE ARTIFACT ./linux-version.txt ./ AS LOCAL ./output/
  SAVE ARTIFACT ./boot/vmlinuz-linux ./ AS LOCAL ./output/
  SAVE ARTIFACT ./boot/initramfs-linux.img ./ AS LOCAL ./output/


# Gets systemd boot loader from arch repository.
systemd-boot:
  FROM +pacstrap-alpine-docker-image

  RUN pacman -Sy && curl $(pacman -Sp systemd | tail -n1) | tar -x --zstd &&\
    cp ./usr/lib/systemd/boot/efi/systemd-bootx64.efi ./

  SAVE ARTIFACT systemd-bootx64.efi AS LOCAL ./output/


# Makes efi system partition image.
esp-partition:
  RUN apk add --update --no-cache mtools dosfstools

  COPY ./make-fat.sh ./
  COPY --dir systemd-loader ./
  COPY +systemd-boot/systemd-bootx64.efi ./
  COPY +kernel-and-initramfs/vmlinuz-linux ./
  COPY +kernel-and-initramfs/initramfs-linux.img ./

  RUN \
    install -m 644 -D ./systemd-loader/loader.conf ./esp/loader/loader.conf &&\
    install -m 644 -D ./systemd-loader/entries/arch.conf ./esp/loader/entries/arch.conf &&\
    install -m 755 -D ./systemd-bootx64.efi ./esp/EFI/BOOT/BOOTx64.EFI &&\
    install -m 644 ./vmlinuz-linux ./esp/vmlinuz-linux &&\
    install -m 644 ./initramfs-linux.img ./esp/initramfs-linux.img

  RUN ./make-fat.sh ./esp ./esp.part ARCH_LIVE

  SAVE ARTIFACT ./esp.part ./ AS LOCAL ./output/


# Makes root file system (erofs) by pacstrap.
rootfs-partition:
  FROM +pacstrap-alpine-docker-image

  # Installs erofs
  RUN apk --update --no-cache add git automake autoconf libtool g++ pkgconf \
    util-linux-dev make lz4-dev &&\
    git clone https://git.kernel.org/pub/scm/linux/kernel/git/xiang/erofs-utils.git &&\
    ( cd erofs-utils && ./autogen.sh && ./configure && make && make install ) &&\
    rm -rf erofs-utils

  # Creates rootfs
  COPY ./rootfs/rootfs-pre-configure.sh ./
  RUN --mount=type=cache,target=./root/var/cache/pacman/pkg --privileged \
    mkdir -p ./root && pacstrap ./root base linux &&\
    ln -sf /run/systemd/resolve/stub-resolv.conf ./root/etc/resolv.conf &&\
    arch-chroot ./root < ./rootfs-pre-configure.sh

  # Configures rootfs by user's script
  ARG rootfs_configure_base64
  IF [ ! -z "$rootfs_configure_base64" ]
    RUN --mount=type=cache,target=./root/cache --privileged \
      echo "$rootfs_configure_base64" | base64 -d >\
        ./root/configure_script.sh &&\
      chmod +x ./root/configure_script.sh &&\
      arch-chroot ./root /configure_script.sh &&\
      rm -rf ./root/configure_script.sh
  END


  # Asserts equality of version between efi linux ootfs linux
  RUN pacman --root ./root -Qi linux | sed -nE 's/Version.*: //gp' > \
    root-linux-version.txt
  COPY +kernel-and-initramfs/linux-version.txt .
  RUN diff root-linux-version.txt ./linux-version.txt \
    || (echo "Versions of esp and rootfs are different. Please drop the cache" >&2 && exit 1)


  # Builds rootfs
  RUN mkfs.erofs '-zlz4hc,2' -E ztailpacking ./rootfs.part ./root > /dev/null

  SAVE ARTIFACT ./rootfs.part ./ AS LOCAL ./output/


# Builds arch live image
live-image:
  RUN apk add --update --no-cache sfdisk mtools uuidgen

  COPY ./make-image.sh ./

  COPY \
    +esp-partition/esp.part \
    +rootfs-partition/rootfs.part \
    ./

  ARG kernel_options="rw"

  # Generates random rootfs uuid
  ARG use_random_rootfs_uuid="true"
  IF use_random_rootfs_uuid
    RUN --no-cache uuidgen > rootfs_uuid.txt
  ELSE
    RUN uuidgen > rootfs_uuid.txt
  END

  # Escpaes kernel options
  RUN echo -E "$kernel_options" | sed 's/[/\&]/\\&/g' > kernel_options.txt

  # Changes kernel boot options.
  RUN mcopy -i ./esp.part ::/loader/entries/arch.conf . &&\
    sed -i "s/{{partuuid}}/$(cat rootfs_uuid.txt)/g;" ./arch.conf &&\
    sed -i "s/{{kernel_options}}/$(cat kernel_options.txt)/g;" ./arch.conf &&\
    mcopy -D o -i ./esp.part ./arch.conf ::/loader/entries/arch.conf

  ## Creates live disk image
  RUN ./make-image.sh ./esp.part ./rootfs.part "$(cat rootfs_uuid.txt)" ./live.img

  SAVE ARTIFACT ./live.img AS LOCAL ./output/
